// bulk.config

docker {
    enabled = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

params {
    publish_dir_mode           = 'copy'
    
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '768.GB'
    max_cpus                   = 192
    max_time                   = '48.h'

    input_format = "airr"
    airr_schema = "${projectDir}/assets/airr/airr_rearrangement_schema.json"
    imgt_lookup = "${projectDir}/assets/airr/imgt_adaptive_lookup.tsv"

    // Sample + compare parameters
    workflow_level = "sample,compare"
    project_name = "tcrtoolkit-bulk_"+ new Date().format("yyyy-MM-dd_HH-mm-ss")
    sample_stats_template = "${projectDir}/notebooks/sample_stats_template.qmd"
    compare_stats_template = "${projectDir}/notebooks/compare_stats_template.qmd"

    // GIANA parameters
    threshold = 7.0
    threshold_score = 3.6
    threshold_vgene = 3.7

    // GLIPH2 parameters
    gliph2_report_template = "${projectDir}/notebooks/gliph2_report_template.qmd"
    ref_files = "${projectDir}/assets/gliph2_files"

    local_min_pvalue = "0.001"
    p_depth = "1000"
    global_convergence_cutoff = "1"
    simulation_depth = "1000"
    kmer_min_depth = "3"
    local_min_OVE = "c(1000, 100, 10)"
    algorithm = "GLIPH2"
    all_aa_interchangeable = "1"

    // TCRDIST3 parameters
    matrix_sparsity = "sparse"
    distance_metric = "tcrdist"
    db_path = "${projectDir}/assets/tcrdist3_files/alphabeta_gammadelta_db.tsv"
}

includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}